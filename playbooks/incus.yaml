---
- name: Incus - Add package repository
  hosts: all
  order: shuffle
  gather_facts: yes
  gather_subset:
    - "distribution_release"
  vars:
    task_release: "{{ incus_release | default('stable') }}"
    task_roles: "{{ incus_roles | default([]) }}"
  any_errors_fatal: true
  tasks:
    - name: Create apt keyring path
      file:
        path: /etc/apt/keyrings/
        mode: 0755
        state: directory
      when: 'task_roles|length > 0 and task_release != "distro"'

    - name: Add Zabbly repository key
      copy:
        src: ../files/incus/zabbly.asc
        dest: /etc/apt/keyrings/ansible-zabbly.asc
      notify: Update apt
      when: 'task_roles|length > 0 and task_release != "distro"'

    - name: Get DPKG architecture
      shell: dpkg --print-architecture
      register: dpkg_architecture
      changed_when: false
      check_mode: no
      when: 'task_roles|length > 0 and task_release != "distro"'

    - name: Add Zabbly package source
      template:
        src: ../files/incus/incus.sources.tpl
        dest: /etc/apt/sources.list.d/ansible-zabbly-incus-{{ task_release }}.sources
      notify: Update apt
      when: 'task_roles|length > 0 and task_release != "distro"'

  handlers:
    - name: Update apt
      apt:
        force_apt_get: yes
        update_cache: yes
        cache_valid_time: 0

- name: Incus - Install packages and bootstrap
  hosts: all
  order: shuffle
  gather_facts: yes
  gather_subset:
    - "default_ipv4"
    - "default_ipv6"
  vars:
  any_errors_fatal: true
  tasks:
    - name: Install the Incus package
      apt:
        name:
          - incus
        install_recommends: no
        state: present
      register: install
      when: 'task_roles | length > 0'

    - name: Install ZFS tools
      apt:
        name:
          - zfsutils-linux
        install_recommends: no
        state: present
      when: "task_roles | length > 0 and 'zfs' in task_init['storage'] | dict2items | json_query('[].value.driver')"

    - name: Set client listen address
      shell:
        cmd: "incus --force-local config set core.https_address 192.168.1.90:9999"
      when: 'install.changed and ("standalone" in task_roles or ("cluster" in task_roles and task_servers[0] == inventory_hostname))'

    - name: Add networks
      shell:
        cmd: "incus network create {{ item.key }} --type={{ item.value.type }}{% for k in item.value.local_config | default([]) %} {{ k }}={{ item.value.local_config[k] }}{% endfor %}{% for k in item.value.config | default([]) %} {{ k }}={{ item.value.config[k] }}{% endfor %}"
      loop: "{{ task_init['network'] | dict2items }}"
      when: 'install.changed and ("standalone" in task_roles or ("cluster" in task_roles and task_servers[0] == inventory_hostname))'

    - name: Set network description
      shell:
        cmd: "incus network set --property {{ item.key }} description=\"{{ item.value.description }}\""
      loop: "{{ task_init['network'] | dict2items }}"
      when: 'install.changed and ("standalone" in task_roles or ("cluster" in task_roles and task_servers[0] == inventory_hostname)) and item.value.description | default(None)'

    - name: Add storage pools
      shell:
        cmd: "incus storage create {{ item.key }} {{ item.value.driver }}{% for k in item.value.local_config | default([]) %} {{ k }}={{ item.value.local_config[k] }}{% endfor %}{% for k in item.value.config | default([]) %} {{ k }}={{ item.value.config[k] }}{% endfor %}"
      loop: "{{ task_init['storage'] | dict2items }}"
      when: 'install.changed and ("standalone" in task_roles or ("cluster" in task_roles and task_servers[0] == inventory_hostname))'

    - name: Set storage pool description
      shell:
        cmd: "incus storage set --property {{ item.key }} description=\"{{ item.value.description }}\""
      loop: "{{ task_init['storage'] | dict2items }}"
      when: 'install.changed and ("standalone" in task_roles or ("cluster" in task_roles and task_servers[0] == inventory_hostname)) and item.value.description | default(None)'

    - name: Add storage pool to default profile
      shell:
        cmd: "incus profile device add default root disk path=/ pool={{ item }}"
      loop: "{{ task_init['storage'] | dict2items | json_query('[?value.default].key') }}"
      when: 'install.changed and ("standalone" in task_roles or ("cluster" in task_roles and task_servers[0] == inventory_hostname))'

    - name: Add network to default profile
      shell:
        cmd: "incus profile device add default eth0 nic network={{ item }} name=eth0"
      loop: "{{ task_init['network'] | dict2items | json_query('[?value.default].key') }}"
      when: 'install.changed and ("standalone" in task_roles or ("cluster" in task_roles and task_servers[0] == inventory_hostname))'

    - name: Bootstrap the cluster
      shell:
        cmd: "incus --force-local cluster enable {{ inventory_hostname }}"
      when: 'install.changed and "cluster" in task_roles and task_servers[0] == inventory_hostname'

    - name: Create join tokens
      delegate_to: "{{ task_servers[0] }}"
      shell:
        cmd: "incus --force-local --quiet cluster add {{ inventory_hostname }}"
      register: cluster_add
      when: 'install.changed and "cluster" in task_roles and task_servers[0] != inventory_hostname'

    - name: Join the cluster
      throttle: 1
      shell:
        cmd: "incus --force-local admin init --preseed"
        stdin: |-
          cluster:
            enabled: true
            cluster_address: "{{ task_ip_address }}"
            cluster_token: "{{ cluster_add.stdout }}"
            server_address: "{{ task_ip_address }}"
            member_config: {% for pool in task_init.storage %}{% for key in task_init.storage[pool].local_config | default([]) %}

              - entity: storage-pool
                name: {{ pool }}
                key: {{ key }}
                value: {{ task_init.storage[pool].local_config[key] }}{% endfor %}{% endfor %}{% for network in task_init.network %}{% for key in task_init.network[network].local_config | default([]) %}

              - entity: network
                name: {{ network }}
                key: {{ key }}
                value: {{ task_init.network[network].local_config[key] }}{% endfor %}{% endfor %}
      when: 'cluster_add.changed'

    - name: Apply additional configuration
      shell:
        cmd: "incus config set {{ item.key }}=\"{{ item.value }}\""
      loop: "{{ task_init['config'] | default({}) | dict2items }}"
      when: 'install.changed and ("standalone" in task_roles or ("cluster" in task_roles and task_servers[0] == inventory_hostname))'

    - name: Load client certificates
      shell:
        cmd: "incus config trust add-certificate --name \"{{ item.key }}\" --type={{ item.value.type | default('client') }} -"
        stdin: "{{ item.value.certificate }}"
      loop: "{{ task_init['clients'] | default({}) | dict2items }}"
      when: 'install.changed and ("standalone" in task_roles or ("cluster" in task_roles and task_servers[0] == inventory_hostname))'

  handlers:
    - name: Restart Incus
      systemd:
        name: incus.service
        state: restarted